---


- hosts: servers
  gather_facts: true
  pre_tasks:
    - name: COMMAND | Install openssl
      command: openssl req -new -newkey rsa:4096 -days 3650 -nodes -x509 -subj "/CN={{ ansible_fqdn }}" -keyout {{ teleport_config_proxy_service_key_pairs.0.key_file }} -out {{ teleport_config_proxy_service_key_pairs.0.cert_file }}
      args:
        creates: "{{ teleport_config_proxy_service_key_pairs.0.key_file }}"

- hosts: all
  gather_facts: true
  pre_tasks:
    - name: APT | Install debug packets
      apt:
        name: '{{ item }}'
        update_cache: yes
        cache_valid_time: 3600
      loop: ['curl', 'htop', 'strace', 'vim']
  roles:
    - ../../

- hosts: servers
  gather_facts: false
  vars:
    __tls_files: ['/home/vagrant/server.key', '/home/vagrant/server.crt', '/home/vagrant/server.cas']
  tasks:
    - name: WAIT_FOR | Wait teleport auth up
      wait_for:
        port: 3025

    - name: COMMAND | Create TLS keys from servers
      command: tctl auth sign --format=db --host=teleport-node-debian-bullseye --out=server --ttl=2190h
      args:
        chdir: /home/vagrant
        creates: '{{ __tls_files.0 }}'

    - name: FETCH | Get TLS files
      fetch:
        src: "{{ item }}"
        dest: "{{ playbook_dir }}/tmp/"
        flat: true
      loop: "{{ __tls_files }}"

- hosts: nodes
  vars:
    __db_user: 'test_teleport'
    __db_pass: '1a2b3c'
    __db_name: 'test_db'
  handlers:
    - name: restart mariadb
      service:
        name: mariadb
        state: restarted
    - name: restart postgresql
      service:
        name: postgresql
        state: restarted
  tasks:

    - name: APT | Install extra packages (application / database tests)
      apt:
        name: '{{ item }}'
        update_cache: yes
        cache_valid_time: 3600
      loop: ['netdata', 'mariadb-server', 'mariadb-client', 'python3-pymysql', 'postgresql', 'python3-psycopg2']

    - name: COPY | Deploy teleport TLS config in the node for MariaDB
      copy:
        src: "{{ item }}"
        dest: "/home/vagrant/"
      with_fileglob: "{{ playbook_dir }}/tmp/server.*"

    - name: COPY | Deploy teleport TLS config in the node for PostgreSQL
      copy:
        src: "{{ item }}"
        dest: /etc/postgresql/
        owner: postgres
        mode: 0600
      with_fileglob: "{{ playbook_dir }}/tmp/server.*"

    - name: LINEINFILE | Allow MariaDB to listen on all interfaces
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        line: 'bind-address            = 0.0.0.0'
        regexp: '^bind-address'
      notify: restart mariadb

    - name: LINEINFILE | Deploy MariaDB custom config
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/99-teleport-tls.cnf
        line: "{{ item }}"
        create: true
      loop:
        - '[mysqld]'
        - 'require_secure_transport=ON'
        - 'ssl-ca=/home/vagrant/server.cas'
        - 'ssl-cert=/home/vagrant/server.crt'
        - 'ssl-key=/home/vagrant/server.key'
      notify: restart mariadb

    - name: MYSQL_USER | Create test users
      community.mysql.mysql_user:
        user: '{{ __db_user }}'
        password: '{{ __db_pass }}'
        priv: '*.*:ALL'
        login_unix_socket: "/run/mysqld/mysqld.sock"

    - name: LINEINFILE | Deploy PostgreSQL custom config
      lineinfile:
        path: '/etc/postgresql/13/main/postgresql.conf'
        line: '{{ item.line }}'
        regexp: '{{ item.regexp }}'
      loop:
        - line: 'ssl = on'
          regexp: '^#?ssl\s+'
        - line: "ssl_cert_file = '/etc/postgresql/server.crt'"
          regexp: "^#?ssl_cert_file"
        - line: "ssl_key_file = '/etc/postgresql/server.key'"
          regexp: "^#?ssl_key_file"
        - line: "ssl_ca_file = '/etc/postgresql/server.cas'"
          regexp: "^#?ssl_ca_file"
        - line: "listen_addresses = '*'"
          regexp: "^#?listen_addresses"
      notify: restart postgresql

    - name: LINEINFILE | Deploy authz on PostgreSQL
      lineinfile:
        path: "/etc/postgresql/13/main/pg_hba.conf"
        line: "hostssl all             all             0.0.0.0/0               cert"
      notify: restart postgresql

    - block:

      - name: POSTGRESQL_DB | Create DB
        postgresql_db:
          name: '{{ __db_name }}'
          login_unix_socket: /var/run/postgresql

      - name: Connect to acme database, create django user, and grant access to database and products table
        postgresql_user:
          db: '{{ __db_name }}'
          name: '{{ __db_user }}' 
          password: '{{ __db_pass }}' 
          login_unix_socket: /var/run/postgresql

      # See: https://github.com/ansible/ansible/issues/16048#issuecomment-229012509
      become_user: postgres
      vars:
        ansible_ssh_pipelining: true
